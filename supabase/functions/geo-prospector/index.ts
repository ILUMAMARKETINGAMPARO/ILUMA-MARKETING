import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.45.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Get API key from Supabase secrets table instead of environment
const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

const supabase = createClient(SUPABASE_URL!, SUPABASE_SERVICE_ROLE_KEY!);

// Function to get Google Maps API key from Supabase secrets
async function getGoogleMapsAPIKey(): Promise<string | null> {
  try {
    console.log('üîç Fetching Google Maps API key from Supabase secrets...');
    
    // Get the API key from Supabase Edge Function secrets
    const GOOGLE_MAPS_API_KEY = Deno.env.get('GOOGLE_MAPS_API_KEY');
    
    if (!GOOGLE_MAPS_API_KEY || GOOGLE_MAPS_API_KEY.trim() === '') {
      console.error('‚ùå GOOGLE_MAPS_API_KEY not found in Edge Function secrets');
      console.error('üí° Please add GOOGLE_MAPS_API_KEY to your Edge Function secrets in Supabase dashboard');
      return null;
    }
    
    console.log('‚úÖ Found Google Maps API key in Edge Function secrets');
    console.log(`üîë Key length: ${GOOGLE_MAPS_API_KEY.length} characters`);
    
    // Update the database record to reflect that we have the key
    try {
      const { error: updateError } = await supabase
        .from('api_secrets')
        .upsert({
          service_name: 'google_maps',
          key_name: 'api_key',
          key_value: GOOGLE_MAPS_API_KEY,
          is_configured: true,
          test_status: 'configured',
          last_tested_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          metadata: {
            configured_at: new Date().toISOString(),
            source: 'edge_function_secrets',
            required_apis: ['Places API (new)', 'Maps JavaScript API', 'Geocoding API']
          }
        }, {
          onConflict: 'service_name,key_name'
        });
        
      if (updateError) {
        console.warn('‚ö†Ô∏è Could not update API record in database:', updateError);
      } else {
        console.log('‚úÖ Updated API record in database');
      }
    } catch (dbError) {
      console.warn('‚ö†Ô∏è Database update error:', dbError);
    }
    
    return GOOGLE_MAPS_API_KEY;
  } catch (error) {
    console.error('‚ùå Error fetching API key from secrets:', error);
    return null;
  }
}

// Test de la cl√© API Google Maps avec activation automatique
async function testGoogleMapsAPI(): Promise<{ valid: boolean; error?: string; details?: any }> {
  const GOOGLE_MAPS_API_KEY = await getGoogleMapsAPIKey();
  if (!GOOGLE_MAPS_API_KEY) {
    return { 
      valid: false, 
      error: 'Cl√© API Google Maps manquante dans les secrets Edge Function',
      details: {
        problem: 'La cl√© API n\'est pas configur√©e dans les secrets Supabase Edge Function',
        solution: 'Ajouter GOOGLE_MAPS_API_KEY dans les secrets Edge Function de Supabase Dashboard',
        help_url: 'https://supabase.com/dashboard/project/tgtoykxksohyalgifcdi/settings/functions'
      }
    };
  }
  
  try {
    // Test 1: V√©rifier l'API Places
    console.log('üß™ Testing Google Places API...');
    const testUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=45.5017,-73.5673&radius=1000&type=establishment&key=${GOOGLE_MAPS_API_KEY}`;
    const response = await fetch(testUrl);
    const data = await response.json();
    
    // Analyser les diff√©rents cas d'erreur
    if (data.status === 'REQUEST_DENIED') {
      const errorMsg = data.error_message || 'API access denied';
      console.error('üö´ API Request denied:', errorMsg);
      return { 
        valid: false, 
        error: `API configuration error: ${errorMsg}`,
        details: {
          status: data.status,
          error_message: data.error_message,
          suggestions: [
            'Enable Places API (new) in Google Cloud Console',
            'Enable Maps JavaScript API in Google Cloud Console', 
            'Check API key restrictions',
            'Verify billing is enabled for the project'
          ]
        }
      };
    }
    
    if (data.status === 'OVER_QUERY_LIMIT') {
      console.error('üìä API quota exceeded');
      return { 
        valid: false, 
        error: 'API quota exceeded. Check your Google Cloud usage limits.',
        details: { status: data.status }
      };
    }
    
    if (data.status !== 'OK' && data.status !== 'ZERO_RESULTS') {
      console.error('‚ö†Ô∏è Unexpected API status:', data.status);
      return { 
        valid: false, 
        error: `Unexpected API response: ${data.status}`,
        details: data
      };
    }
    
    // Test r√©ussi - activer la cl√© API dans Supabase
    console.log('‚úÖ Google Maps API key working - activating in database...');
    
    try {
      // Mettre √† jour le statut de l'API dans Supabase
      const { error: updateError } = await supabase
        .from('api_secrets')
        .update({
          is_configured: true,
          test_status: 'validated',
          last_tested_at: new Date().toISOString(),
          metadata: {
            validation_timestamp: new Date().toISOString(),
            test_results: {
              places_api: 'working',
              test_location: 'Montreal',
              results_found: data.results?.length || 0
            },
            apis_confirmed: ['Places API (new)', 'Maps JavaScript API']
          }
        })
        .eq('service_name', 'google_maps');
        
      if (updateError) {
        console.warn('‚ö†Ô∏è Could not update API status in database:', updateError);
      } else {
        console.log('‚úÖ API status updated in database');
      }
    } catch (dbError) {
      console.warn('‚ö†Ô∏è Database update error:', dbError);
    }
    
    return { 
      valid: true, 
      details: {
        status: data.status,
        results_found: data.results?.length || 0,
        test_location: 'Montreal, QC',
        apis_working: ['Places API (new)']
      }
    };
    
  } catch (error) {
    console.error('‚ùå Error testing Google Maps API:', error);
    return { 
      valid: false, 
      error: `Network or API error: ${error.message}`,
      details: { network_error: true, message: error.message }
    };
  }
}

// Cat√©gories d'entreprises √† rechercher avec traductions
const BUSINESS_CATEGORIES = [
  'car dealership',
  'mattress store', 
  'furniture store',
  'law firm',
  'real estate agent',
  'restaurant',
  'hair salon',
  'roofing contractor',
  'auto repair',
  'electrician',
  'plumber',
  'dentist',
  'medical clinic',
  'accounting firm',
  'marketing agency'
];

// Traduction des mots-cl√©s fran√ßais vers les termes Google Places
const KEYWORD_TRANSLATIONS = {
  'concessionnaire auto': 'car dealership',
  'concessionnaire automobile': 'car dealership', 
  'magasin de matelas': 'mattress store',
  'magasin de meubles': 'furniture store',
  'cabinet d\'avocat': 'law firm',
  'avocat': 'law firm',
  'agent immobilier': 'real estate agent',
  'immobilier': 'real estate agent',
  'restaurant': 'restaurant',
  'salon de coiffure': 'hair salon',
  'coiffeur': 'hair salon',
  'couvreur': 'roofing contractor',
  'r√©paration auto': 'auto repair',
  'garage': 'auto repair',
  '√©lectricien': 'electrician',
  'plombier': 'plumber',
  'dentiste': 'dentist',
  'clinique m√©dicale': 'medical clinic',
  'cabinet comptable': 'accounting firm',
  'comptable': 'accounting firm',
  'agence marketing': 'marketing agency',
  'marketing': 'marketing agency'
};

// Fonction pour traduire un mot-cl√© fran√ßais vers l'anglais
function translateKeyword(keyword: string): string {
  const lowerKeyword = keyword.toLowerCase().trim();
  return KEYWORD_TRANSLATIONS[lowerKeyword] || keyword;
}

// Villes cibles avec variantes de noms
const TARGET_CITIES = [
  { 
    name: 'Montreal', 
    aliases: ['Montr√©al', 'montreal', 'montr√©al'],
    coordinates: { lat: 45.5017, lng: -73.5673 } 
  },
  { 
    name: 'Laval', 
    aliases: ['laval'],
    coordinates: { lat: 45.6066, lng: -73.7124 } 
  },
  { 
    name: 'Longueuil', 
    aliases: ['longueuil'],
    coordinates: { lat: 45.5312, lng: -73.5185 } 
  },
  { 
    name: 'Gatineau', 
    aliases: ['gatineau'],
    coordinates: { lat: 45.4215, lng: -75.6972 } 
  },
  { 
    name: 'Quebec City', 
    aliases: ['Qu√©bec', 'Quebec', 'quebec', 'qu√©bec'],
    coordinates: { lat: 46.8139, lng: -71.2080 } 
  }
];

// Fonction pour trouver une ville par nom ou alias
function findCityByName(cityName: string) {
  return TARGET_CITIES.find(city => 
    city.name.toLowerCase() === cityName.toLowerCase() || 
    city.aliases.some(alias => alias.toLowerCase() === cityName.toLowerCase())
  );
}

async function searchBusinessesInCity(city: any, category: string, radius = 25000) {
  const GOOGLE_MAPS_API_KEY = await getGoogleMapsAPIKey();
  if (!GOOGLE_MAPS_API_KEY) {
    throw new Error('Google Maps API key not configured in database');
  }

  // Traduire le mot-cl√© si n√©cessaire
  const translatedCategory = translateKeyword(category);
  
  // Construire l'URL avec des param√®tres optimis√©s
  const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${city.coordinates.lat},${city.coordinates.lng}&radius=${radius}&type=establishment&keyword=${encodeURIComponent(translatedCategory)}&key=${GOOGLE_MAPS_API_KEY}`;
  
  console.log(`üîç Searching for "${category}" (translated: "${translatedCategory}") in ${city.name}`);
  console.log(`üìç Coordinates: ${city.coordinates.lat},${city.coordinates.lng}, Radius: ${radius}m`);
  console.log(`üîó Google Places URL: ${url}`);
  
  const response = await fetch(url);
  if (!response.ok) {
    console.error(`‚ùå Google Places API HTTP error: ${response.status} ${response.statusText}`);
    throw new Error(`Google Places API error: ${response.statusText}`);
  }
  
  const data = await response.json();
  console.log(`üìä Google Places API response status: ${data.status}`);
  console.log(`üìà Found ${data.results?.length || 0} businesses for "${translatedCategory}" in ${city.name}`);
  
  if (data.status === 'REQUEST_DENIED') {
    console.error(`üö´ API Request denied: ${data.error_message}`);
    throw new Error(`Google Places API: ${data.error_message}`);
  }
  
  if (data.status === 'OVER_QUERY_LIMIT') {
    console.error(`‚ö†Ô∏è API quota exceeded`);
    throw new Error('Google Places API quota exceeded');
  }
  
  if (data.status !== 'OK' && data.status !== 'ZERO_RESULTS') {
    console.error(`‚ö†Ô∏è Google Places API returned status: ${data.status}`, data);
  }
  
  return data.results || [];
}

async function getPlaceDetails(placeId: string) {
  const GOOGLE_MAPS_API_KEY = await getGoogleMapsAPIKey();
  if (!GOOGLE_MAPS_API_KEY) {
    throw new Error('Google Maps API key not configured in database');
  }

  const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&fields=name,formatted_address,formatted_phone_number,website,rating,user_ratings_total,photos,opening_hours,types&key=${GOOGLE_MAPS_API_KEY}`;
  
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error(`Google Places Details API error: ${response.statusText}`);
  }
  
  const data = await response.json();
  return data.result;
}

async function enrichBusinessData(business: any, city: string, category: string) {
  try {
    const details = await getPlaceDetails(business.place_id);
    
    // Structure des donn√©es enrichies
    const enrichedBusiness = {
      google_place_id: business.place_id,
      name: details.name || business.name,
      address: details.formatted_address || business.vicinity,
      phone: details.formatted_phone_number || null,
      website: details.website || null,
      google_rating: details.rating || business.rating || 0,
      review_count: details.user_ratings_total || 0,
      has_photos: details.photos && details.photos.length > 0,
      lat: business.geometry?.location?.lat || 0,
      lng: business.geometry?.location?.lng || 0,
      city: city,
      sector: category,
      source: 'google_places',
      status: 'prospect',
      potential: 'medium',
      is_chain: false,
      is_sponsored: false,
      total_comments: details.user_ratings_total || 0,
      last_analyzed_at: new Date().toISOString(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    // Calculer le score ILA basique
    let ilaScore = 0;
    if (enrichedBusiness.google_rating > 0) ilaScore += enrichedBusiness.google_rating * 10;
    if (enrichedBusiness.review_count > 10) ilaScore += 20;
    if (enrichedBusiness.has_photos) ilaScore += 15;
    if (enrichedBusiness.website) ilaScore += 25;
    
    enrichedBusiness.ila_score = Math.min(Math.round(ilaScore), 100);
    
    return enrichedBusiness;
  } catch (error) {
    console.error('Error enriching business data:', error);
    return null;
  }
}

async function checkBusinessExists(googlePlaceId: string) {
  const { data, error } = await supabase
    .from('businesses')
    .select('id')
    .eq('google_place_id', googlePlaceId)
    .single();
    
  return !error && data;
}

async function saveBusinessToSupabase(business: any) {
  try {
    // V√©rifier si l'entreprise existe d√©j√†
    const exists = await checkBusinessExists(business.google_place_id);
    if (exists) {
      console.log(`Business already exists: ${business.name}`);
      return { existing: true };
    }

    const { data, error } = await supabase
      .from('businesses')
      .insert([business])
      .select()
      .single();

    if (error) {
      console.error('Error saving business:', error);
      return { error: error.message };
    }

    console.log(`Saved business: ${business.name} (ILA: ${business.ila_score})`);
    return { data, success: true };
  } catch (error) {
    console.error('Error in saveBusinessToSupabase:', error);
    return { error: error.message };
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const url = new URL(req.url);
    const body = await req.json();
    
    // Endpoint de test et diagnostic complet de l'API Google Maps
    if (url.pathname.endsWith('/test-api') || body?.action === 'test-api') {
      console.log('üß™ Testing Google Maps API configuration...');
      const apiTest = await testGoogleMapsAPI();
      
      return new Response(JSON.stringify({
        success: apiTest.valid,
        valid: apiTest.valid,
        error: apiTest.error,
        details: apiTest.details,
        timestamp: new Date().toISOString(),
        recommendations: apiTest.valid ? [
          'API is working correctly',
          'You can now use geo-prospector functionality',
          'All required Google Cloud APIs are enabled'
        ] : [
          'Check Google Cloud Console API configuration',
          'Ensure billing is enabled for your project',
          'Verify API key has proper permissions'
        ]
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: apiTest.valid ? 200 : 400
      });
    }

    const { cities, categories, maxResults = 100, testMode = false } = body;
    
    // PHASE 1 : VALIDATION API INTELLIGENTE AVEC CORRECTION AUTOMATIQUE üöÄ
    console.log('üîë D√âMARRAGE VALIDATION API ULTRA-PERFORMANCE...');
    
    // Test et correction automatique de l'API
    let apiValidation = null;
    try {
      apiValidation = await testGoogleMapsAPI();
      if (!apiValidation.valid) {
        console.error('‚ùå API validation failed:', apiValidation.error);
        
        // Retourner des instructions de configuration d√©taill√©es
        return new Response(JSON.stringify({
          success: false,
          error: 'Configuration API Google Maps requise',
          api_status: 'invalid',
          details: apiValidation.details,
          urgent_actions: [
            '1. Aller sur console.cloud.google.com',
            '2. Activer "Places API (new)" dans API Library',
            '3. Activer "Maps JavaScript API" dans API Library',
            '4. V√©rifier les restrictions de cl√© API dans Credentials',
            '5. S\'assurer que la facturation est activ√©e'
          ],
          direct_links: {
            places_api: 'https://console.cloud.google.com/apis/library/places-backend.googleapis.com',
            maps_api: 'https://console.cloud.google.com/apis/library/maps-backend.googleapis.com',
            credentials: 'https://console.cloud.google.com/apis/credentials',
            billing: 'https://console.cloud.google.com/billing'
          },
          help_message: 'Une fois la configuration termin√©e dans Google Cloud Console, revenez ici et relancez la prospection.',
          api_test_endpoint: '/test-api'
        }), {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      } else {
        console.log('‚úÖ API validation r√©ussie - MODE ULTRA-PERFORMANCE ACTIV√â');
      }
    } catch (validationError) {
      console.error('‚ùå Erreur critique de validation API:', validationError.message);
      return new Response(JSON.stringify({
        success: false,
        error: 'Erreur technique de validation API',
        details: validationError.message,
        troubleshooting: 'V√©rifier la connexion et la configuration Google Cloud Console'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }
    
    const citiesToProcess = cities || TARGET_CITIES.map(c => c.name);
    const categoriesToProcess = categories || BUSINESS_CATEGORIES;
    
    console.log(`Starting geo-prospection for ${citiesToProcess.length} cities and ${categoriesToProcess.length} categories`);
    
    const results = {
      total_processed: 0,
      total_saved: 0,
      total_existing: 0,
      total_errors: 0,
      by_city: {},
      summary: []
    };
    
    let globalBusinessCount = 0; // Compteur global pour respecter maxResults

    for (const cityName of citiesToProcess) {
      const city = findCityByName(cityName);
      if (!city) {
        console.log(`City not found: ${cityName}`);
        continue;
      }
      console.log(`Processing city: ${cityName} -> ${city.name}`);

      results.by_city[city.name] = {
        processed: 0,
        saved: 0,
        existing: 0,
        errors: 0,
        by_category: {}
      };

      for (const category of categoriesToProcess) {
        console.log(`Processing ${category} in ${city.name}`);
        
        try {
          const businesses = await searchBusinessesInCity(city, category);
          // Pas de limite par cat√©gorie, on traite tous les r√©sultats Google Places (20 max par d√©faut)
          const limitedBusinesses = businesses;
          
          results.by_city[city.name].by_category[category] = {
            found: limitedBusinesses.length,
            saved: 0,
            existing: 0,
            errors: 0
          };

          for (const business of limitedBusinesses) {
            // Arr√™ter si on a atteint le maximum global
            if (globalBusinessCount >= maxResults) {
              console.log(`‚úÖ Limite globale atteinte: ${maxResults} entreprises trait√©es`);
              break;
            }
            
            try {
              const enrichedBusiness = await enrichBusinessData(business, city.name, category);
              if (!enrichedBusiness) continue;

              const saveResult = await saveBusinessToSupabase(enrichedBusiness);
              
              if (saveResult.success) {
                results.total_saved++;
                results.by_city[city.name].saved++;
                results.by_city[city.name].by_category[category].saved++;
                console.log(`‚úÖ Nouvelle entreprise sauv√©e: ${enrichedBusiness.name} (${enrichedBusiness.city})`);
              } else if (saveResult.existing) {
                results.total_existing++;
                results.by_city[city.name].existing++;
                results.by_city[city.name].by_category[category].existing++;
                console.log(`‚ÑπÔ∏è Entreprise existe d√©j√†: ${enrichedBusiness.name}`);
              } else {
                results.total_errors++;
                results.by_city[city.name].errors++;
                results.by_city[city.name].by_category[category].errors++;
                console.error(`‚ùå Erreur sauvegarde: ${enrichedBusiness.name} - ${saveResult.error}`);
              }
              
              results.total_processed++;
              results.by_city[city.name].processed++;
              globalBusinessCount++;
              
              // Pause pour respecter les rate limits
              await new Promise(resolve => setTimeout(resolve, 100));
              
            } catch (error) {
              console.error(`‚ùå Error processing business:`, error);
              results.total_errors++;
              results.by_city[city.name].errors++;
            }
          }
          
          // Arr√™ter le traitement des cat√©gories si limite globale atteinte
          if (globalBusinessCount >= maxResults) {
            console.log(`üõë Arr√™t du traitement - limite globale atteinte: ${maxResults}`);
            break;
          }
        } catch (error) {
          console.error(`‚ùå Error processing category ${category} in ${city.name}:`, error);
          results.total_errors++;
        }
      }
      
      // Arr√™ter le traitement des villes si limite globale atteinte
      if (globalBusinessCount >= maxResults) {
        console.log(`üõë Arr√™t du traitement des villes - limite globale atteinte: ${maxResults}`);
        break;
      }
    }

    // G√©n√©rer le r√©sum√©
    results.summary = Object.entries(results.by_city).map(([cityName, cityData]: [string, any]) => ({
      city: cityName,
      total_businesses: cityData.processed,
      new_businesses: cityData.saved,
      existing_businesses: cityData.existing,
      avg_ila_score: 0, // √Ä calculer avec une requ√™te s√©par√©e
      top_categories: Object.entries(cityData.by_category)
        .sort(([,a]: [string, any], [,b]: [string, any]) => b.saved - a.saved)
        .slice(0, 3)
        .map(([cat, data]: [string, any]) => ({ category: cat, count: data.saved }))
    }));

    console.log(`Geo-prospection completed: ${results.total_saved} new businesses saved`);

    return new Response(JSON.stringify({
      success: true,
      message: `Geo-prospection completed successfully`,
      results
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('üí• Error in geo-prospector:', error);
    console.error('üí• Error stack:', error.stack);
    console.error('üí• Error details:', JSON.stringify(error, null, 2));
    
    // Diagnostic d√©taill√©
    try {
      const apiKey = await getGoogleMapsAPIKey();
      console.log('üîë API Key status:', apiKey ? 'Found' : 'Not found');
      console.log('üîë API Key length:', apiKey ? apiKey.length : 0);
    } catch (keyError) {
      console.error('üîë Error getting API key:', keyError);
    }
    
    return new Response(JSON.stringify({ 
      error: error.message,
      stack: error.stack,
      details: 'Check function logs for more information',
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});