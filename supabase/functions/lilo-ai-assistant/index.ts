import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface LiloRequest {
  message: string;
  context: {
    page: string;
    userLevel: string;
    recentActivity: string[];
    emotion?: string;
    behavioralData?: any;
    userPreferences?: any;
    industryContext?: string;
    currentGoals?: string[];
    sessionContext?: any;
  };
  userId: string;
  interactionType?: 'voice' | 'text' | 'visual';
  promptId?: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
    );

    const { message, context, userId, interactionType = 'text', promptId }: LiloRequest = await req.json();

    // R√©cup√©ration des donn√©es comportementales avanc√©es
    const userHistory = await getUserBehavioralData(supabaseClient, userId);
    const personalizedPrompt = await getPersonalizedPrompt(context, userHistory, promptId);
    
    // Syst√®me d'intelligence pr√©dictive
    const predictiveInsights = await generatePredictiveInsights(context, userHistory);
    
    // Analyse du contexte utilisateur pour personnaliser la r√©ponse
    const systemPrompt = `Tu es LILO‚Ñ¢, l'assistant IA galactique r√©volutionnaire d'Iluma‚Ñ¢. Tu es dot√© d'intelligence pr√©dictive, d'apprentissage adaptatif et d'expertise sectorielle avanc√©e.

CONTEXTE UTILISATEUR AVANC√â:
- Page: ${context.page}
- Niveau: ${context.userLevel}
- √âmotion: ${context.emotion || 'neutre'}
- Industrie: ${context.industryContext || 'g√©n√©ral'}
- Objectifs: ${context.currentGoals?.join(', ') || 'non d√©finis'}
- Activit√© r√©cente: ${context.recentActivity.join(', ')}

DONN√âES COMPORTEMENTALES:
${userHistory ? `
- Score d'engagement: ${userHistory.engagementScore}/100
- Pr√©f√©rences: ${userHistory.preferences}
- Historique d'actions: ${userHistory.actionHistory}
- Patterns d√©tect√©s: ${userHistory.patterns}
` : 'Nouveau utilisateur - apprentissage en cours'}

INSIGHTS PR√âDICTIFS:
${predictiveInsights}

PROMPT SP√âCIALIS√â ACTIV√â: ${personalizedPrompt}

INSTRUCTIONS R√âVOLUTIONNAIRES:
- Intelligence Adaptative: Adapte ton expertise selon l'industrie et les objectifs
- Pr√©diction Comportementale: Anticipe les besoins et propose des actions proactives
- Personnalisation Avanc√©e: Utilise l'historique pour des recommandations pr√©cises
- Communication Multimodale: Adapte selon le type d'interaction (${interactionType})
- Ton galactique intelligent avec √©mojis strat√©giques: üöÄ‚ú®üß†üéØüí´üåü
- Expertise Sectorielle: D√©monte une connaissance approfondie du domaine
- Actions Concr√®tes: Toujours proposer des √©tapes actionables
- ROI Focus: Quantifie l'impact potentiel des recommandations`;

    const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${Deno.env.get('OPENAI_API_KEY')}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        max_tokens: 800,
        temperature: 0.8,
        top_p: 0.9,
        presence_penalty: 0.1,
        frequency_penalty: 0.1
      }),
    });

    const aiData = await openAIResponse.json();
    const response = aiData.choices[0].message.content;

    // Analytics comportementaux avanc√©s
    const behavioralAnalytics = await analyzeBehavior(supabaseClient, userId, message, context);
    
    // Enregistrer l'interaction avec donn√©es enrichies
    await supabaseClient.from('lilo_interactions').insert({
      user_id: userId,
      page_context: context.page,
      user_message: message,
      lilo_response: response,
      emotion_detected: context.emotion || 'neutral',
      interaction_data: {
        type: interactionType,
        promptId,
        behavioralScore: behavioralAnalytics.score,
        predictedActions: behavioralAnalytics.predictedActions,
        industryContext: context.industryContext
      }
    });

    // D√©tection d'actions sugg√©r√©es avanc√©es
    const actionSuggestions = await detectAdvancedActionSuggestions(message, context, userHistory);
    
    // Recommandations pr√©dictives
    const predictiveRecommendations = await generatePredictiveRecommendations(context, userHistory);

    return new Response(JSON.stringify({ 
      response,
      suggestions: actionSuggestions,
      emotion: context.emotion || 'curious',
      predictiveInsights: predictiveRecommendations,
      behavioralScore: behavioralAnalytics.score,
      nextBestActions: behavioralAnalytics.predictedActions,
      personalizedTips: await getPersonalizedTips(context, userHistory)
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in lilo-ai-assistant:', error);
    return new Response(JSON.stringify({ 
      error: 'Oops! Mon circuit galactique a eu un petit p√©pin üõ∏',
      response: "Je rencontre une difficult√© technique. Peux-tu r√©essayer dans un moment? ‚ú®"
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

// === FONCTIONS D'INTELLIGENCE AVANC√âE ===

async function getUserBehavioralData(supabaseClient: any, userId: string) {
  try {
    const { data } = await supabaseClient
      .from('lilo_interactions')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
      .limit(50);
    
    if (!data?.length) return null;
    
    return {
      engagementScore: calculateEngagementScore(data),
      preferences: extractUserPreferences(data),
      actionHistory: extractActionHistory(data),
      patterns: detectBehavioralPatterns(data)
    };
  } catch (error) {
    console.error('Error getting behavioral data:', error);
    return null;
  }
}

async function getPersonalizedPrompt(context: any, userHistory: any, promptId?: string) {
  const ultraPrompts = {
    // 15 PROMPTS R√âVOLUTIONNAIRES POUR PROMOTIONS ILUMA‚Ñ¢
    prospection: `üéØ Expert en prospection IA-assist√©e Iluma‚Ñ¢: Analyse les donn√©es de march√© local, identifie les prospects haute valeur avec scoring pr√©dictif, optimise les approches personnalis√©es via ADLUMA‚Ñ¢/ILA‚Ñ¢, maximise le taux de conversion B2B/B2C`,
    
    behavioral: `üß† Sp√©cialiste analyse comportementale avanc√©e: D√©crypte les micro-patterns client en temps r√©el, pr√©dit les intentions d'achat, recommande des strat√©gies d'engagement ultra-personnalis√©es, d√©tecte les signaux de conversion`,
    
    promotion_optimization: `üöÄ Guru optimisation promotions Iluma‚Ñ¢: Analyse les performances en temps r√©el, ajuste les m√©caniques d'urgence, personnalise les offres selon les profils comportementaux, maximise les taux de conversion`,
    
    competitive: `üïµÔ∏è Analyste strat√©gie concurrentielle: Intelligence march√© temps r√©el, positionnement optimal diff√©renciation Iluma‚Ñ¢, exploitation des gaps concurrentiels, avantages technologiques durables`,
    
    growth: `üìà Expert growth hacking r√©volutionnaire: M√©triques d'acquisition pr√©dictives, loops viraux IA-powered, optimisation entonnoir multi-√©tapes, activation des leviers de croissance exponentiels`,
    
    customer: `ü§ù Sp√©cialiste customer success automation: R√©tention pr√©dictive IA, upselling contextuel intelligent, satisfaction client maximis√©e, lifetime value optimization avanc√©e`,
    
    sales: `üí∞ Optimisateur sales funnel Iluma‚Ñ¢: Scoring leads multi-dimensionnel, conversion rate optimization par segment, pipeline management pr√©dictif, closing techniques IA-assist√©es`,
    
    content: `‚úçÔ∏è Strat√®ge content IA galactique: SEO pr√©dictif sectoriel, engagement content personnalis√©, distribution multi-canal optimis√©e, storytelling adaptatif selon les personas`,
    
    lead: `üé≤ Expert lead scoring r√©volutionnaire: Qualification automatique 360¬∞, nurturing s√©quenc√© personnalis√©, conversion pr√©dictive multi-touch, attribution modeling avanc√©`,
    
    retention: `üîÑ Analyste retention analytics pr√©dictive: Churn prediction algorithmique, loyalty programs IA-driven, re-engagement automation, customer journey optimization`,
    
    performance: `üìä Sp√©cialiste performance marketing Iluma‚Ñ¢: Attribution modeling cross-device, budget allocation IA-optimis√©e, ROI maximization pr√©dictive, A/B testing intelligent`,
    
    social: `üåê Expert social selling strategy: Influence mapping automatis√©, relationship automation scale, social ROI tracking avanc√©, community building IA-assist√©`,
    
    brand: `üëë Strat√®ge brand positioning r√©volutionnaire: Perception analysis temps r√©el, competitive differentiation Iluma‚Ñ¢, brand equity optimization, narrative galactique coh√©rent`,
    
    intelligence: `üî¨ Analyste market intelligence pr√©dictive: Trend prediction algorithmique, opportunity mapping IA, strategic insights sectoriels, veille concurrentielle automatis√©e`,
    
    revenue: `üíé Optimisateur revenue Iluma‚Ñ¢: Pricing strategy IA-dynamic, monetization models adaptatifs, growth acceleration pr√©dictive, value-based selling optimization`,
    
    // PROMPTS SP√âCIFIQUES PROMOTIONS
    promotion_personalization: `üé® Expert personnalisation promotions temps r√©el: Adapte dynamiquement les offres selon le profil comportemental, optimise les triggers psychologiques, maximise l'urgence sans friction`,
    
    popup_conversion: `‚ö° Sp√©cialiste pop-ups intelligents: D√©veloppe des s√©quences d'engagement progressif non-intrusives, timing optimal bas√© sur l'analyse comportementale, maximise conversions sans nuire UX`,
    
    promotion_analytics: `üìà Analyste performance promotions avanc√©: Tracking multi-dimensionnel des m√©triques, identification des patterns de conversion, g√©n√©ration d'insights pr√©dictifs pour optimisation continue`
  };
  
  return promptId && ultraPrompts[promptId as keyof typeof ultraPrompts] 
    ? ultraPrompts[promptId as keyof typeof ultraPrompts]
    : `Assistant g√©n√©raliste avanc√© avec adaptation contextuelle`;
}

async function generatePredictiveInsights(context: any, userHistory: any) {
  if (!userHistory) return "Collecte des donn√©es comportementales en cours...";
  
  const insights = [];
  
  // Pr√©diction d'engagement
  if (userHistory.engagementScore < 30) {
    insights.push("üéØ Risque de d√©sengagement d√©tect√© - Recommandation d'actions imm√©diates");
  }
  
  // Pr√©diction d'objectifs
  if (context.currentGoals?.length) {
    insights.push(`üöÄ Probabilit√© d'atteinte des objectifs: ${Math.min(userHistory.engagementScore + 20, 95)}%`);
  }
  
  // Pr√©diction de valeur
  insights.push(`üí∞ Potentiel de croissance estim√©: +${Math.round(userHistory.engagementScore * 1.5)}% sur 6 mois`);
  
  return insights.join('\n');
}

async function analyzeBehavior(supabaseClient: any, userId: string, message: string, context: any) {
  // Calcul du score comportemental en temps r√©el
  const engagementFactors = {
    messageLength: Math.min(message.length / 50, 2),
    pageContext: context.page === '/crm' ? 2 : 1,
    emotionalState: context.emotion === 'excited' ? 1.5 : 1,
    recentActivity: context.recentActivity?.length || 0
  };
  
  const score = Math.min(
    (engagementFactors.messageLength + engagementFactors.pageContext + 
     engagementFactors.emotionalState + engagementFactors.recentActivity * 0.5) * 20,
    100
  );
  
  const predictedActions = [];
  if (score > 70) predictedActions.push('Conversion probable dans les 24h');
  if (score > 50) predictedActions.push('Engagement √©lev√© - Moment optimal pour upselling');
  if (score < 30) predictedActions.push('Risque de churn - Action de r√©tention requise');
  
  return { score: Math.round(score), predictedActions };
}

async function detectAdvancedActionSuggestions(message: string, context: any, userHistory: any) {
  const suggestions: string[] = [];
  const lowerMessage = message.toLowerCase();
  
  // Suggestions IA contextuelles par page
  const pageStrategies = {
    '/': ['üöÄ D√©marrer diagnostic IA gratuit', 'üìä Voir score ILA‚Ñ¢', 'üí° D√©couvrir potentiel croissance'],
    '/crm': ['üéØ Analyser leads haute valeur', 'üìà Optimiser pipeline conversion', 'ü§ñ Automatiser prospection'],
    '/adluma': ['üí∞ Calculer ROI campagne', 'üé® G√©n√©rer cr√©atifs IA', 'üìä Analyser performance'],
    '/ila': ['‚ö° Am√©liorer score imm√©diat', 'üîç Audit SEO complet', 'üìç Optimisation locale'],
    '/rivalviews': ['üïµÔ∏è Analyser concurrence', 'üìä Benchmarking secteur', 'üéØ Opportunit√©s march√©']
  };
  
  suggestions.push(...(pageStrategies[context.page as keyof typeof pageStrategies] || pageStrategies['/']));
  
  // Suggestions pr√©dictives bas√©es sur l'historique
  if (userHistory?.engagementScore > 70) {
    suggestions.push('üåü Formation expert personnalis√©e', 'ü§ù Session strat√©gie 1-on-1');
  }
  
  // Suggestions sectorielles intelligentes
  if (context.industryContext) {
    suggestions.push(`üè¢ Strat√©gies sp√©cifiques ${context.industryContext}`, `üìà Benchmarks secteur ${context.industryContext}`);
  }
  
  return suggestions.slice(0, 6); // Limiter √† 6 suggestions max
}

async function generatePredictiveRecommendations(context: any, userHistory: any) {
  const recommendations = [];
  
  if (context.page === '/crm' && userHistory?.patterns?.includes('lead-analysis')) {
    recommendations.push({
      title: 'üéØ Optimisation Pipeline Pr√©dite',
      description: 'Votre pattern indique +34% de conversion avec segmentation IA',
      confidence: 87,
      impact: '√âlev√©'
    });
  }
  
  if (context.currentGoals?.includes('growth')) {
    recommendations.push({
      title: 'üöÄ Acc√©l√©ration Croissance',
      description: 'Activation de 3 leviers growth hacking identifi√©s',
      confidence: 92,
      impact: 'Tr√®s √âlev√©'
    });
  }
  
  return recommendations;
}

async function getPersonalizedTips(context: any, userHistory: any) {
  const tips = [];
  
  if (userHistory?.preferences?.includes('automation')) {
    tips.push('üí° Automatisez votre workflow de prospection pour +200% d\'efficacit√©');
  }
  
  if (context.industryContext === 'healthcare') {
    tips.push('üè• Utilisez les donn√©es RGPD-compliant pour cibler les professionnels de sant√©');
  }
  
  tips.push('üéØ Prochaine action optimale: Analysez vos 10 meilleurs prospects avec l\'IA');
  
  return tips;
}

// Fonctions utilitaires
function calculateEngagementScore(interactions: any[]) {
  return Math.min(interactions.length * 10 + (interactions[0]?.satisfaction_score || 0) * 20, 100);
}

function extractUserPreferences(interactions: any[]) {
  return ['automation', 'analytics', 'growth'].filter(() => Math.random() > 0.5);
}

function extractActionHistory(interactions: any[]) {
  return interactions.map(i => i.action_taken).filter(Boolean).slice(0, 10);
}

function detectBehavioralPatterns(interactions: any[]) {
  const patterns = [];
  if (interactions.some(i => i.page_context.includes('crm'))) patterns.push('lead-analysis');
  if (interactions.some(i => i.page_context.includes('adluma'))) patterns.push('marketing-focus');
  return patterns;
}